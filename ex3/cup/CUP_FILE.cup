/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;
import java.util.*;

parser code
{:
	public Lexer lexer;
	public int error_line = -1;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getTokenStartPosition());
		System.out.print("] ");
		error_line = lexer.getLine();
        throw new RuntimeException("syntax error");
        //System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getTokenStartPosition());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s;
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal LT;
terminal GT;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal COMMA;
terminal TYPE_INT;
terminal NIL;
terminal NEW;
terminal ARRAY;
terminal CLASS;
terminal RETURN;
terminal TYPE_STRING;
terminal TYPE_VOID;
terminal EXTENDS;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_dec dec;
non terminal AST_Program Program;
non terminal AST_VAR_dec varDec;
non terminal List<AST_dec> decllist;
non terminal List<AST_type> funcParams;
non terminal List<AST_dec> stmtList;
non terminal List<AST_dec> cFieldList;
non terminal List<AST_EXP> expList;
non terminal AST_func_dec funcDec;
non terminal AST_class classDec;
non terminal AST_type type;
non terminal AST_arrayTypeDef arrayTypeDef;
non terminal AST_new_exp newExp;
non terminal AST_dec stmt;
non terminal AST_dec_Node cField;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;
precedence left LT;
precedence left GT;
precedence left EQ;

/************************/
/* START WITH: stmtList */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/

Program	    ::=		dec:s decllist:l {:l.add(s); RESULT = new AST_Program(l, sleft);    :}
					;

decllist    ::=     dec:s decllist:l  {:l.add(s); RESULT = l;:}
                    |  /* empty */ {:RESULT = new LinkedList<AST_dec>();:}
                    ;


dec         ::=     varDec:v                   {:RESULT = new AST_dec_Node(v, vleft); :}
                    | funcDec:f                {:RESULT = new AST_dec_Node(f, fleft); :}
                    | classDec:c            {:RESULT = new AST_dec_Node(c, cleft); :}
                    | arrayTypeDef:a           {:RESULT = new AST_dec_Node(a, aleft); :}
                    ;

varDec      ::=     type:t ID:name SEMICOLON   {:RESULT = new AST_VAR_dec(t, name, nameleft);:}
                    | type:t ID:name ASSIGN exp:e SEMICOLON {:RESULT = new AST_VAR_dec(t, name, e, nameleft);:}
                    | type:t ID:name ASSIGN newExp:e SEMICOLON {:RESULT = new AST_VAR_dec(t, name, e, nameleft);:}
                    ;

arrayTypeDef ::=    ARRAY ID:name EQ type:t LBRACK RBRACK SEMICOLON {:RESULT = new AST_arrayTypeDef(name, t, nameleft);:}
                    ;

funcDec     ::=     type:t ID:name LPAREN RPAREN LBRACE stmt:s stmtList:sl RBRACE {:sl.add(s); RESULT = new AST_func_dec(t,name,sl, nameleft);:}
                    |type:t ID:name LPAREN type:t2 ID:name1 funcParams:fp RPAREN LBRACE stmt:s stmtList:sl RBRACE {:sl.add(s); fp.add(new AST_type(t2,name1, name1left));RESULT = new AST_func_dec(t,name,sl,fp, nameleft);:}
                    ;

classDec     ::=   CLASS ID:name LBRACE cField:f cFieldList:fl RBRACE {:fl.add(f); RESULT = new AST_class(name, fl, nameleft); :}
                    | CLASS ID:name EXTENDS ID:name2 LBRACE cField:f cFieldList:fl RBRACE {:fl.add(f); RESULT = new AST_class(name, fl, name2, nameleft); :}
                    ;

cFieldList   ::=    cField:f cFieldList:fl {:fl.add(f); RESULT = fl;:}
                    | /* empty */           {:RESULT = new LinkedList<AST_dec>();:}
                    ;

funcParams       ::=   COMMA type:t ID:name funcParams:l    {:l.add(new AST_type(t,name,nameleft)); RESULT = l;:}
                    |  /* empty */                          {:RESULT = new LinkedList<AST_type>();:}
                    ;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name, nameleft);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName, vleft); :}
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e, vleft);     :}
					;

stmtList    ::=     stmt:s stmtList:sl                  {:sl.add(s); RESULT = sl;:}
                    | /* empty */                       {: RESULT = new LinkedList<AST_dec>(); :}
                    ;


stmt		::=		varDec:v                                                    {:RESULT = new AST_dec_Node(v, vleft); :}
                    | var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_dec_ASSIGN(v,e, vleft); :}
                    | var:v ASSIGN newExp:e SEMICOLON                           {: RESULT = new AST_dec_ASSIGN(v,e, vleft); :} // mabye wont work
					| RETURN:r SEMICOLON                                           {: RESULT = new AST_return(rleft); :}
					| RETURN exp:e SEMICOLON                                      {:RESULT = new AST_return(e, eleft);:}
					| IF:i    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_dec_IF(cond,body, ileft); :}
					| WHILE:wh LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_dec_WHILE(cond,body, whleft); :}
					| ID:name LPAREN RPAREN SEMICOLON                           {: RESULT = new AST_func_call2(name, nameleft);:}
					| var:v DOT ID:name LPAREN RPAREN SEMICOLON                 {:RESULT = new AST_func_call2(name, v, vleft);:}
					| var:v DOT ID:name LPAREN exp:e expList:l RPAREN SEMICOLON {:l.add(e); RESULT = new AST_func_call2(name, v, l, vleft); :}
					| ID:name LPAREN exp:e expList:l RPAREN SEMICOLON {:l.add(e); RESULT = new AST_func_call2(name, null, l, nameleft); :}
					;

expList     ::=     COMMA exp:e expList:l {:l.add(e); RESULT = l;:}
                    | /* empty */ {:RESULT = new LinkedList<AST_EXP>();:}
                    ;

exp			::=		INT:i								{: RESULT = new AST_EXP_INT(i, ileft);          :}
					| var:v								{: RESULT = new AST_EXP_VAR(v, vleft);          :}
					| exp:e1 PLUS  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 0, e1left);:}
					| exp:e1 MINUS exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 1, e1left);:}
					| exp:e1 TIMES exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 2, e1left);:}
					| exp:e1 DIVIDE exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 3, e1left);:}
					| exp:e1 LT exp:e2				    {: RESULT = new AST_EXP_BINOP(e1, e2, 4, e1left);:}
					| exp:e1 GT exp:e2				    {: RESULT = new AST_EXP_BINOP(e1, e2, 5, e1left);:}
					| exp:e1 EQ exp:e2				    {: RESULT = new AST_EXP_BINOP(e1, e2, 6, e1left);:}
					| LPAREN exp:e1 RPAREN              {: RESULT = e1; :}
					| ID:name LPAREN RPAREN                            {: RESULT = new AST_func_call(name, nameleft);:}
                    | var:v DOT ID:name LPAREN RPAREN                  {:RESULT = new AST_func_call(name, v, vleft);:}
                    | var:v DOT ID:name LPAREN exp:e expList:l RPAREN  {:l.add(e); RESULT = new AST_func_call(name, v, l, vleft); :}
                    | ID:name LPAREN exp:e expList:l RPAREN {:l.add(e); RESULT = new AST_func_call(name, null, l, nameleft); :}
					| MINUS INT:i                        {: RESULT = new AST_EXP_INT(-i, ileft); :}
					| NIL:n                               {: RESULT = new AST_EXP_NIL(nleft);    :}
					| STRING:s                            {: RESULT = new AST_EXP_STR(s, sleft); :}
		            ;

cField      ::=     varDec:v                              {:RESULT = new AST_dec_Node(v, vleft); :}
                    |funcDec:f                            {:RESULT = new AST_dec_Node(f, fleft); :}
                    ;

newExp      ::=     NEW type:t                          {:RESULT = new AST_new_exp(t, tleft);:}
                    | NEW type:t LBRACK exp:e RBRACK    {:RESULT = new AST_new_exp(t,e, tleft);:}
                    ;

type       ::=      TYPE_INT:t {:RESULT = new AST_type("int", null, tleft);:}
                    | TYPE_STRING:t {:RESULT = new AST_type("string", null, tleft);:}
                    | TYPE_VOID:t {:RESULT = new AST_type("void", null, tleft);:}
                    | ID:t {:RESULT = new AST_type(t, null, tleft);:}
                    ;